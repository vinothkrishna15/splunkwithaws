<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">
	
	<batch:job id="beaconDownload">
	<batch:step id="beaconDwldPreprocess" next="decider">
			<batch:tasklet ref="beaconDwldPreprocessor"/>
		</batch:step>
	
		<batch:step id="beaconDwldProcessing" next="beaconMapDwldProcessing">
			<batch:tasklet>
				<batch:chunk reader="beaconDwldReader" writer="beaconDataDwldWriter" 
				commit-interval="${download.commit.interval}" skip-policy="alwaysSkip" retry-limit="0"/>
			</batch:tasklet>
		</batch:step>
		<batch:step id="beaconMapDwldProcessing" next="beaconIouMapDwldProcessing">
			<batch:tasklet>
				<batch:chunk reader="beaconMapDwldReader" writer="beaconMapDwldWriter" 
				commit-interval="${download.commit.interval}" skip-policy="alwaysSkip" retry-limit="0"/>
			</batch:tasklet>
		</batch:step>
		<batch:step id="beaconIouMapDwldProcessing" next="beaconDwldPreprocess">
			<batch:tasklet>
				<batch:chunk reader="beaconIouMapDwldReader" writer="beaconIouMapDwldWriter" 
				commit-interval="${download.commit.interval}" skip-policy="alwaysSkip" retry-limit="0"/>
			</batch:tasklet>
		</batch:step>
		
		 <batch:decision id="decider" decider="beaconDwldFlowDecider">
              <batch:next on="PREPROCESS" to="beaconDwldPreprocess" />
              <batch:next on="BEACON_DWLD_PROCESSING" to="beaconDwldProcessing" />
              <batch:end on="END"/>
         </batch:decision>
	</batch:job>
	
	<!-- Readers -->
	<bean id="beaconDwldReader" class="com.tcs.destination.reader.NativeQueryObjectReader">
		<property name="repository" ref="beaconDataTRepository"/>
		<property name="methodName" value="findAll"/>
	</bean>
	<bean id="beaconMapDwldReader" class="com.tcs.destination.reader.NativeQueryObjectReader">
		<property name="repository" ref="beaconCustomerMappingRepository"/>
		<property name="methodName" value="findAll"/>
	</bean>
	<bean id="beaconIouMapDwldReader" class="com.tcs.destination.reader.NativeQueryObjectReader">
		<property name="repository" ref="iouBeaconMappingTRepository"/>
		<property name="methodName" value="findAll"/>
	</bean>
	
	<!-- Writers -->
	<bean id="beaconDataDwldWriter" class="com.tcs.destination.writer.BeaconDataDwldWriter">
		<property name="template" value="${beaconSheetTemplate}"/>
		<property name="dataProcessingRequestRepository" ref="dataProcessingRequestRepository"/>
		<property name="fileServerPath" value="${fileserver.path}" />
		<property name="dataProcessingService" ref="dataProcessingService" />
	</bean>
	
	<bean id="beaconMapDwldWriter" class="com.tcs.destination.writer.BeaconMapDwldWriter"/>
	
	<bean id="beaconIouMapDwldWriter" class="com.tcs.destination.writer.BeaconIouMapDwldWriter">
	    <property name="dataProcessingRequestRepository" ref="dataProcessingRequestRepository"/>
	</bean>
		
	<!-- Decider -->
    <bean id="beaconDwldFlowDecider" class="com.tcs.destination.decider.BeaconDwldFlowDecider" />
	
	<!-- scheduler  -->
	<bean id="beaconDwldScheduler" class="com.tcs.destination.scheduler.JobScheduler">
		<property name="job" ref="beaconDownload"/>
	</bean>
	
	<task:scheduled-tasks>
        <task:scheduled ref="beaconDwldScheduler" method="run" cron="${beacon.download.job.cron}"/>
    </task:scheduled-tasks> 

</beans>